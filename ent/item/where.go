// Code generated by ent, DO NOT EDIT.

package item

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/breadchris/hn/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldID, id))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldDeleted, v))
}

// By applies equality check predicate on the "by" field. It's identical to ByEQ.
func By(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldBy, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldText, v))
}

// Dead applies equality check predicate on the "dead" field. It's identical to DeadEQ.
func Dead(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldDead, v))
}

// Parent applies equality check predicate on the "parent" field. It's identical to ParentEQ.
func Parent(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldParent, v))
}

// Poll applies equality check predicate on the "poll" field. It's identical to PollEQ.
func Poll(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPoll, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldURL, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldScore, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldTitle, v))
}

// Descendants applies equality check predicate on the "descendants" field. It's identical to DescendantsEQ.
func Descendants(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldDescendants, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldTime, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldDeleted, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldType, vs...))
}

// ByEQ applies the EQ predicate on the "by" field.
func ByEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldBy, v))
}

// ByNEQ applies the NEQ predicate on the "by" field.
func ByNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldBy, v))
}

// ByIn applies the In predicate on the "by" field.
func ByIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldBy, vs...))
}

// ByNotIn applies the NotIn predicate on the "by" field.
func ByNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldBy, vs...))
}

// ByGT applies the GT predicate on the "by" field.
func ByGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldBy, v))
}

// ByGTE applies the GTE predicate on the "by" field.
func ByGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldBy, v))
}

// ByLT applies the LT predicate on the "by" field.
func ByLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldBy, v))
}

// ByLTE applies the LTE predicate on the "by" field.
func ByLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldBy, v))
}

// ByContains applies the Contains predicate on the "by" field.
func ByContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldBy, v))
}

// ByHasPrefix applies the HasPrefix predicate on the "by" field.
func ByHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldBy, v))
}

// ByHasSuffix applies the HasSuffix predicate on the "by" field.
func ByHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldBy, v))
}

// ByIsNil applies the IsNil predicate on the "by" field.
func ByIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldBy))
}

// ByNotNil applies the NotNil predicate on the "by" field.
func ByNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldBy))
}

// ByEqualFold applies the EqualFold predicate on the "by" field.
func ByEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldBy, v))
}

// ByContainsFold applies the ContainsFold predicate on the "by" field.
func ByContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldBy, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldText, v))
}

// TextIsNil applies the IsNil predicate on the "text" field.
func TextIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldText))
}

// TextNotNil applies the NotNil predicate on the "text" field.
func TextNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldText))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldText, v))
}

// DeadEQ applies the EQ predicate on the "dead" field.
func DeadEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldDead, v))
}

// DeadNEQ applies the NEQ predicate on the "dead" field.
func DeadNEQ(v bool) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldDead, v))
}

// ParentEQ applies the EQ predicate on the "parent" field.
func ParentEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldParent, v))
}

// ParentNEQ applies the NEQ predicate on the "parent" field.
func ParentNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldParent, v))
}

// ParentIn applies the In predicate on the "parent" field.
func ParentIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldParent, vs...))
}

// ParentNotIn applies the NotIn predicate on the "parent" field.
func ParentNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldParent, vs...))
}

// ParentGT applies the GT predicate on the "parent" field.
func ParentGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldParent, v))
}

// ParentGTE applies the GTE predicate on the "parent" field.
func ParentGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldParent, v))
}

// ParentLT applies the LT predicate on the "parent" field.
func ParentLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldParent, v))
}

// ParentLTE applies the LTE predicate on the "parent" field.
func ParentLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldParent, v))
}

// ParentIsNil applies the IsNil predicate on the "parent" field.
func ParentIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldParent))
}

// ParentNotNil applies the NotNil predicate on the "parent" field.
func ParentNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldParent))
}

// PollEQ applies the EQ predicate on the "poll" field.
func PollEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldPoll, v))
}

// PollNEQ applies the NEQ predicate on the "poll" field.
func PollNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldPoll, v))
}

// PollIn applies the In predicate on the "poll" field.
func PollIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldPoll, vs...))
}

// PollNotIn applies the NotIn predicate on the "poll" field.
func PollNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldPoll, vs...))
}

// PollGT applies the GT predicate on the "poll" field.
func PollGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldPoll, v))
}

// PollGTE applies the GTE predicate on the "poll" field.
func PollGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldPoll, v))
}

// PollLT applies the LT predicate on the "poll" field.
func PollLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldPoll, v))
}

// PollLTE applies the LTE predicate on the "poll" field.
func PollLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldPoll, v))
}

// PollIsNil applies the IsNil predicate on the "poll" field.
func PollIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldPoll))
}

// PollNotNil applies the NotNil predicate on the "poll" field.
func PollNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldPoll))
}

// KidsIsNil applies the IsNil predicate on the "kids" field.
func KidsIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldKids))
}

// KidsNotNil applies the NotNil predicate on the "kids" field.
func KidsNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldKids))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldURL, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldScore, v))
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldScore))
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldScore))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Item {
	return predicate.Item(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Item {
	return predicate.Item(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Item {
	return predicate.Item(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Item {
	return predicate.Item(sql.FieldContainsFold(FieldTitle, v))
}

// PartsIsNil applies the IsNil predicate on the "parts" field.
func PartsIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldParts))
}

// PartsNotNil applies the NotNil predicate on the "parts" field.
func PartsNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldParts))
}

// DescendantsEQ applies the EQ predicate on the "descendants" field.
func DescendantsEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldDescendants, v))
}

// DescendantsNEQ applies the NEQ predicate on the "descendants" field.
func DescendantsNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldDescendants, v))
}

// DescendantsIn applies the In predicate on the "descendants" field.
func DescendantsIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldDescendants, vs...))
}

// DescendantsNotIn applies the NotIn predicate on the "descendants" field.
func DescendantsNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldDescendants, vs...))
}

// DescendantsGT applies the GT predicate on the "descendants" field.
func DescendantsGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldDescendants, v))
}

// DescendantsGTE applies the GTE predicate on the "descendants" field.
func DescendantsGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldDescendants, v))
}

// DescendantsLT applies the LT predicate on the "descendants" field.
func DescendantsLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldDescendants, v))
}

// DescendantsLTE applies the LTE predicate on the "descendants" field.
func DescendantsLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldDescendants, v))
}

// DescendantsIsNil applies the IsNil predicate on the "descendants" field.
func DescendantsIsNil() predicate.Item {
	return predicate.Item(sql.FieldIsNull(FieldDescendants))
}

// DescendantsNotNil applies the NotNil predicate on the "descendants" field.
func DescendantsNotNil() predicate.Item {
	return predicate.Item(sql.FieldNotNull(FieldDescendants))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v int) predicate.Item {
	return predicate.Item(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...int) predicate.Item {
	return predicate.Item(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v int) predicate.Item {
	return predicate.Item(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v int) predicate.Item {
	return predicate.Item(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v int) predicate.Item {
	return predicate.Item(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v int) predicate.Item {
	return predicate.Item(sql.FieldLTE(FieldTime, v))
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ChildrenTable, ChildrenPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Item) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParents applies the HasEdge predicate on the "parents" edge.
func HasParents() predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ParentsTable, ParentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentsWith applies the HasEdge predicate on the "parents" edge with a given conditions (other predicates).
func HasParentsWith(preds ...predicate.Item) predicate.Item {
	return predicate.Item(func(s *sql.Selector) {
		step := newParentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Item) predicate.Item {
	return predicate.Item(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Item) predicate.Item {
	return predicate.Item(sql.NotPredicates(p))
}
