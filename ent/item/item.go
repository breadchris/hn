// Code generated by ent, DO NOT EDIT.

package item

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the item type in the database.
	Label = "item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldBy holds the string denoting the by field in the database.
	FieldBy = "by"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldDead holds the string denoting the dead field in the database.
	FieldDead = "dead"
	// FieldParent holds the string denoting the parent field in the database.
	FieldParent = "parent"
	// FieldPoll holds the string denoting the poll field in the database.
	FieldPoll = "poll"
	// FieldKids holds the string denoting the kids field in the database.
	FieldKids = "kids"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldParts holds the string denoting the parts field in the database.
	FieldParts = "parts"
	// FieldDescendants holds the string denoting the descendants field in the database.
	FieldDescendants = "descendants"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeParents holds the string denoting the parents edge name in mutations.
	EdgeParents = "parents"
	// Table holds the table name of the item in the database.
	Table = "items"
	// ChildrenTable is the table that holds the children relation/edge. The primary key declared below.
	ChildrenTable = "item_children"
	// ParentsTable is the table that holds the parents relation/edge. The primary key declared below.
	ParentsTable = "item_children"
)

// Columns holds all SQL columns for item fields.
var Columns = []string{
	FieldID,
	FieldDeleted,
	FieldType,
	FieldBy,
	FieldText,
	FieldDead,
	FieldParent,
	FieldPoll,
	FieldKids,
	FieldURL,
	FieldScore,
	FieldTitle,
	FieldParts,
	FieldDescendants,
	FieldTime,
}

var (
	// ChildrenPrimaryKey and ChildrenColumn2 are the table columns denoting the
	// primary key for the children relation (M2M).
	ChildrenPrimaryKey = []string{"item_id", "parent_id"}
	// ParentsPrimaryKey and ParentsColumn2 are the table columns denoting the
	// primary key for the parents relation (M2M).
	ParentsPrimaryKey = []string{"item_id", "parent_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeJob     Type = "job"
	TypeStory   Type = "story"
	TypeComment Type = "comment"
	TypePoll    Type = "poll"
	TypePollopt Type = "pollopt"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeJob, TypeStory, TypeComment, TypePoll, TypePollopt:
		return nil
	default:
		return fmt.Errorf("item: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Item queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeleted orders the results by the deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByBy orders the results by the by field.
func ByBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBy, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByDead orders the results by the dead field.
func ByDead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDead, opts...).ToFunc()
}

// ByParent orders the results by the parent field.
func ByParent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParent, opts...).ToFunc()
}

// ByPoll orders the results by the poll field.
func ByPoll(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoll, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescendants orders the results by the descendants field.
func ByDescendants(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescendants, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentsCount orders the results by parents count.
func ByParentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParentsStep(), opts...)
	}
}

// ByParents orders the results by parents terms.
func ByParents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ChildrenTable, ChildrenPrimaryKey...),
	)
}
func newParentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ParentsTable, ParentsPrimaryKey...),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
