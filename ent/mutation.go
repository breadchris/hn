// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/breadchris/hn/ent/item"
	"github.com/breadchris/hn/ent/predicate"
	"github.com/breadchris/hn/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeItem = "Item"
	TypeUser = "User"
)

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op              Op
	typ             string
	id              *string
	deleted         *bool
	_type           *item.Type
	by              *string
	text            *string
	dead            *bool
	parent          *int
	addparent       *int
	poll            *int
	addpoll         *int
	kids            *[]int
	appendkids      []int
	url             *string
	score           *int
	addscore        *int
	title           *string
	parts           *[]int
	appendparts     []int
	descendants     *int
	adddescendants  *int
	time            *int
	addtime         *int
	clearedFields   map[string]struct{}
	children        map[string]struct{}
	removedchildren map[string]struct{}
	clearedchildren bool
	parents         map[string]struct{}
	removedparents  map[string]struct{}
	clearedparents  bool
	done            bool
	oldValue        func(context.Context) (*Item, error)
	predicates      []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id string) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Item entities.
func (m *ItemMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Item.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeleted sets the "deleted" field.
func (m *ItemMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *ItemMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *ItemMutation) ResetDeleted() {
	m.deleted = nil
}

// SetType sets the "type" field.
func (m *ItemMutation) SetType(i item.Type) {
	m._type = &i
}

// GetType returns the value of the "type" field in the mutation.
func (m *ItemMutation) GetType() (r item.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldType(ctx context.Context) (v item.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ItemMutation) ResetType() {
	m._type = nil
}

// SetBy sets the "by" field.
func (m *ItemMutation) SetBy(s string) {
	m.by = &s
}

// By returns the value of the "by" field in the mutation.
func (m *ItemMutation) By() (r string, exists bool) {
	v := m.by
	if v == nil {
		return
	}
	return *v, true
}

// OldBy returns the old "by" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBy: %w", err)
	}
	return oldValue.By, nil
}

// ClearBy clears the value of the "by" field.
func (m *ItemMutation) ClearBy() {
	m.by = nil
	m.clearedFields[item.FieldBy] = struct{}{}
}

// ByCleared returns if the "by" field was cleared in this mutation.
func (m *ItemMutation) ByCleared() bool {
	_, ok := m.clearedFields[item.FieldBy]
	return ok
}

// ResetBy resets all changes to the "by" field.
func (m *ItemMutation) ResetBy() {
	m.by = nil
	delete(m.clearedFields, item.FieldBy)
}

// SetText sets the "text" field.
func (m *ItemMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *ItemMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldText(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ClearText clears the value of the "text" field.
func (m *ItemMutation) ClearText() {
	m.text = nil
	m.clearedFields[item.FieldText] = struct{}{}
}

// TextCleared returns if the "text" field was cleared in this mutation.
func (m *ItemMutation) TextCleared() bool {
	_, ok := m.clearedFields[item.FieldText]
	return ok
}

// ResetText resets all changes to the "text" field.
func (m *ItemMutation) ResetText() {
	m.text = nil
	delete(m.clearedFields, item.FieldText)
}

// SetDead sets the "dead" field.
func (m *ItemMutation) SetDead(b bool) {
	m.dead = &b
}

// Dead returns the value of the "dead" field in the mutation.
func (m *ItemMutation) Dead() (r bool, exists bool) {
	v := m.dead
	if v == nil {
		return
	}
	return *v, true
}

// OldDead returns the old "dead" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDead: %w", err)
	}
	return oldValue.Dead, nil
}

// ResetDead resets all changes to the "dead" field.
func (m *ItemMutation) ResetDead() {
	m.dead = nil
}

// SetParent sets the "parent" field.
func (m *ItemMutation) SetParent(i int) {
	m.parent = &i
	m.addparent = nil
}

// Parent returns the value of the "parent" field in the mutation.
func (m *ItemMutation) Parent() (r int, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParent returns the old "parent" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldParent(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParent: %w", err)
	}
	return oldValue.Parent, nil
}

// AddParent adds i to the "parent" field.
func (m *ItemMutation) AddParent(i int) {
	if m.addparent != nil {
		*m.addparent += i
	} else {
		m.addparent = &i
	}
}

// AddedParent returns the value that was added to the "parent" field in this mutation.
func (m *ItemMutation) AddedParent() (r int, exists bool) {
	v := m.addparent
	if v == nil {
		return
	}
	return *v, true
}

// ClearParent clears the value of the "parent" field.
func (m *ItemMutation) ClearParent() {
	m.parent = nil
	m.addparent = nil
	m.clearedFields[item.FieldParent] = struct{}{}
}

// ParentCleared returns if the "parent" field was cleared in this mutation.
func (m *ItemMutation) ParentCleared() bool {
	_, ok := m.clearedFields[item.FieldParent]
	return ok
}

// ResetParent resets all changes to the "parent" field.
func (m *ItemMutation) ResetParent() {
	m.parent = nil
	m.addparent = nil
	delete(m.clearedFields, item.FieldParent)
}

// SetPoll sets the "poll" field.
func (m *ItemMutation) SetPoll(i int) {
	m.poll = &i
	m.addpoll = nil
}

// Poll returns the value of the "poll" field in the mutation.
func (m *ItemMutation) Poll() (r int, exists bool) {
	v := m.poll
	if v == nil {
		return
	}
	return *v, true
}

// OldPoll returns the old "poll" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldPoll(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoll is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoll requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoll: %w", err)
	}
	return oldValue.Poll, nil
}

// AddPoll adds i to the "poll" field.
func (m *ItemMutation) AddPoll(i int) {
	if m.addpoll != nil {
		*m.addpoll += i
	} else {
		m.addpoll = &i
	}
}

// AddedPoll returns the value that was added to the "poll" field in this mutation.
func (m *ItemMutation) AddedPoll() (r int, exists bool) {
	v := m.addpoll
	if v == nil {
		return
	}
	return *v, true
}

// ClearPoll clears the value of the "poll" field.
func (m *ItemMutation) ClearPoll() {
	m.poll = nil
	m.addpoll = nil
	m.clearedFields[item.FieldPoll] = struct{}{}
}

// PollCleared returns if the "poll" field was cleared in this mutation.
func (m *ItemMutation) PollCleared() bool {
	_, ok := m.clearedFields[item.FieldPoll]
	return ok
}

// ResetPoll resets all changes to the "poll" field.
func (m *ItemMutation) ResetPoll() {
	m.poll = nil
	m.addpoll = nil
	delete(m.clearedFields, item.FieldPoll)
}

// SetKids sets the "kids" field.
func (m *ItemMutation) SetKids(i []int) {
	m.kids = &i
	m.appendkids = nil
}

// Kids returns the value of the "kids" field in the mutation.
func (m *ItemMutation) Kids() (r []int, exists bool) {
	v := m.kids
	if v == nil {
		return
	}
	return *v, true
}

// OldKids returns the old "kids" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldKids(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKids is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKids requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKids: %w", err)
	}
	return oldValue.Kids, nil
}

// AppendKids adds i to the "kids" field.
func (m *ItemMutation) AppendKids(i []int) {
	m.appendkids = append(m.appendkids, i...)
}

// AppendedKids returns the list of values that were appended to the "kids" field in this mutation.
func (m *ItemMutation) AppendedKids() ([]int, bool) {
	if len(m.appendkids) == 0 {
		return nil, false
	}
	return m.appendkids, true
}

// ClearKids clears the value of the "kids" field.
func (m *ItemMutation) ClearKids() {
	m.kids = nil
	m.appendkids = nil
	m.clearedFields[item.FieldKids] = struct{}{}
}

// KidsCleared returns if the "kids" field was cleared in this mutation.
func (m *ItemMutation) KidsCleared() bool {
	_, ok := m.clearedFields[item.FieldKids]
	return ok
}

// ResetKids resets all changes to the "kids" field.
func (m *ItemMutation) ResetKids() {
	m.kids = nil
	m.appendkids = nil
	delete(m.clearedFields, item.FieldKids)
}

// SetURL sets the "url" field.
func (m *ItemMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *ItemMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *ItemMutation) ClearURL() {
	m.url = nil
	m.clearedFields[item.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *ItemMutation) URLCleared() bool {
	_, ok := m.clearedFields[item.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *ItemMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, item.FieldURL)
}

// SetScore sets the "score" field.
func (m *ItemMutation) SetScore(i int) {
	m.score = &i
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *ItemMutation) Score() (r int, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds i to the "score" field.
func (m *ItemMutation) AddScore(i int) {
	if m.addscore != nil {
		*m.addscore += i
	} else {
		m.addscore = &i
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *ItemMutation) AddedScore() (r int, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ClearScore clears the value of the "score" field.
func (m *ItemMutation) ClearScore() {
	m.score = nil
	m.addscore = nil
	m.clearedFields[item.FieldScore] = struct{}{}
}

// ScoreCleared returns if the "score" field was cleared in this mutation.
func (m *ItemMutation) ScoreCleared() bool {
	_, ok := m.clearedFields[item.FieldScore]
	return ok
}

// ResetScore resets all changes to the "score" field.
func (m *ItemMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
	delete(m.clearedFields, item.FieldScore)
}

// SetTitle sets the "title" field.
func (m *ItemMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ItemMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldTitle(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *ItemMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[item.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *ItemMutation) TitleCleared() bool {
	_, ok := m.clearedFields[item.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *ItemMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, item.FieldTitle)
}

// SetParts sets the "parts" field.
func (m *ItemMutation) SetParts(i []int) {
	m.parts = &i
	m.appendparts = nil
}

// Parts returns the value of the "parts" field in the mutation.
func (m *ItemMutation) Parts() (r []int, exists bool) {
	v := m.parts
	if v == nil {
		return
	}
	return *v, true
}

// OldParts returns the old "parts" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldParts(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParts: %w", err)
	}
	return oldValue.Parts, nil
}

// AppendParts adds i to the "parts" field.
func (m *ItemMutation) AppendParts(i []int) {
	m.appendparts = append(m.appendparts, i...)
}

// AppendedParts returns the list of values that were appended to the "parts" field in this mutation.
func (m *ItemMutation) AppendedParts() ([]int, bool) {
	if len(m.appendparts) == 0 {
		return nil, false
	}
	return m.appendparts, true
}

// ClearParts clears the value of the "parts" field.
func (m *ItemMutation) ClearParts() {
	m.parts = nil
	m.appendparts = nil
	m.clearedFields[item.FieldParts] = struct{}{}
}

// PartsCleared returns if the "parts" field was cleared in this mutation.
func (m *ItemMutation) PartsCleared() bool {
	_, ok := m.clearedFields[item.FieldParts]
	return ok
}

// ResetParts resets all changes to the "parts" field.
func (m *ItemMutation) ResetParts() {
	m.parts = nil
	m.appendparts = nil
	delete(m.clearedFields, item.FieldParts)
}

// SetDescendants sets the "descendants" field.
func (m *ItemMutation) SetDescendants(i int) {
	m.descendants = &i
	m.adddescendants = nil
}

// Descendants returns the value of the "descendants" field in the mutation.
func (m *ItemMutation) Descendants() (r int, exists bool) {
	v := m.descendants
	if v == nil {
		return
	}
	return *v, true
}

// OldDescendants returns the old "descendants" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDescendants(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescendants is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescendants requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescendants: %w", err)
	}
	return oldValue.Descendants, nil
}

// AddDescendants adds i to the "descendants" field.
func (m *ItemMutation) AddDescendants(i int) {
	if m.adddescendants != nil {
		*m.adddescendants += i
	} else {
		m.adddescendants = &i
	}
}

// AddedDescendants returns the value that was added to the "descendants" field in this mutation.
func (m *ItemMutation) AddedDescendants() (r int, exists bool) {
	v := m.adddescendants
	if v == nil {
		return
	}
	return *v, true
}

// ClearDescendants clears the value of the "descendants" field.
func (m *ItemMutation) ClearDescendants() {
	m.descendants = nil
	m.adddescendants = nil
	m.clearedFields[item.FieldDescendants] = struct{}{}
}

// DescendantsCleared returns if the "descendants" field was cleared in this mutation.
func (m *ItemMutation) DescendantsCleared() bool {
	_, ok := m.clearedFields[item.FieldDescendants]
	return ok
}

// ResetDescendants resets all changes to the "descendants" field.
func (m *ItemMutation) ResetDescendants() {
	m.descendants = nil
	m.adddescendants = nil
	delete(m.clearedFields, item.FieldDescendants)
}

// SetTime sets the "time" field.
func (m *ItemMutation) SetTime(i int) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *ItemMutation) Time() (r int, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *ItemMutation) AddTime(i int) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *ItemMutation) AddedTime() (r int, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *ItemMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// AddChildIDs adds the "children" edge to the Item entity by ids.
func (m *ItemMutation) AddChildIDs(ids ...string) {
	if m.children == nil {
		m.children = make(map[string]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Item entity.
func (m *ItemMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Item entity was cleared.
func (m *ItemMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Item entity by IDs.
func (m *ItemMutation) RemoveChildIDs(ids ...string) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Item entity.
func (m *ItemMutation) RemovedChildrenIDs() (ids []string) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *ItemMutation) ChildrenIDs() (ids []string) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *ItemMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// AddParentIDs adds the "parents" edge to the Item entity by ids.
func (m *ItemMutation) AddParentIDs(ids ...string) {
	if m.parents == nil {
		m.parents = make(map[string]struct{})
	}
	for i := range ids {
		m.parents[ids[i]] = struct{}{}
	}
}

// ClearParents clears the "parents" edge to the Item entity.
func (m *ItemMutation) ClearParents() {
	m.clearedparents = true
}

// ParentsCleared reports if the "parents" edge to the Item entity was cleared.
func (m *ItemMutation) ParentsCleared() bool {
	return m.clearedparents
}

// RemoveParentIDs removes the "parents" edge to the Item entity by IDs.
func (m *ItemMutation) RemoveParentIDs(ids ...string) {
	if m.removedparents == nil {
		m.removedparents = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.parents, ids[i])
		m.removedparents[ids[i]] = struct{}{}
	}
}

// RemovedParents returns the removed IDs of the "parents" edge to the Item entity.
func (m *ItemMutation) RemovedParentsIDs() (ids []string) {
	for id := range m.removedparents {
		ids = append(ids, id)
	}
	return
}

// ParentsIDs returns the "parents" edge IDs in the mutation.
func (m *ItemMutation) ParentsIDs() (ids []string) {
	for id := range m.parents {
		ids = append(ids, id)
	}
	return
}

// ResetParents resets all changes to the "parents" edge.
func (m *ItemMutation) ResetParents() {
	m.parents = nil
	m.clearedparents = false
	m.removedparents = nil
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Item, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.deleted != nil {
		fields = append(fields, item.FieldDeleted)
	}
	if m._type != nil {
		fields = append(fields, item.FieldType)
	}
	if m.by != nil {
		fields = append(fields, item.FieldBy)
	}
	if m.text != nil {
		fields = append(fields, item.FieldText)
	}
	if m.dead != nil {
		fields = append(fields, item.FieldDead)
	}
	if m.parent != nil {
		fields = append(fields, item.FieldParent)
	}
	if m.poll != nil {
		fields = append(fields, item.FieldPoll)
	}
	if m.kids != nil {
		fields = append(fields, item.FieldKids)
	}
	if m.url != nil {
		fields = append(fields, item.FieldURL)
	}
	if m.score != nil {
		fields = append(fields, item.FieldScore)
	}
	if m.title != nil {
		fields = append(fields, item.FieldTitle)
	}
	if m.parts != nil {
		fields = append(fields, item.FieldParts)
	}
	if m.descendants != nil {
		fields = append(fields, item.FieldDescendants)
	}
	if m.time != nil {
		fields = append(fields, item.FieldTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldDeleted:
		return m.Deleted()
	case item.FieldType:
		return m.GetType()
	case item.FieldBy:
		return m.By()
	case item.FieldText:
		return m.Text()
	case item.FieldDead:
		return m.Dead()
	case item.FieldParent:
		return m.Parent()
	case item.FieldPoll:
		return m.Poll()
	case item.FieldKids:
		return m.Kids()
	case item.FieldURL:
		return m.URL()
	case item.FieldScore:
		return m.Score()
	case item.FieldTitle:
		return m.Title()
	case item.FieldParts:
		return m.Parts()
	case item.FieldDescendants:
		return m.Descendants()
	case item.FieldTime:
		return m.Time()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldDeleted:
		return m.OldDeleted(ctx)
	case item.FieldType:
		return m.OldType(ctx)
	case item.FieldBy:
		return m.OldBy(ctx)
	case item.FieldText:
		return m.OldText(ctx)
	case item.FieldDead:
		return m.OldDead(ctx)
	case item.FieldParent:
		return m.OldParent(ctx)
	case item.FieldPoll:
		return m.OldPoll(ctx)
	case item.FieldKids:
		return m.OldKids(ctx)
	case item.FieldURL:
		return m.OldURL(ctx)
	case item.FieldScore:
		return m.OldScore(ctx)
	case item.FieldTitle:
		return m.OldTitle(ctx)
	case item.FieldParts:
		return m.OldParts(ctx)
	case item.FieldDescendants:
		return m.OldDescendants(ctx)
	case item.FieldTime:
		return m.OldTime(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case item.FieldType:
		v, ok := value.(item.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case item.FieldBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBy(v)
		return nil
	case item.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case item.FieldDead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDead(v)
		return nil
	case item.FieldParent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParent(v)
		return nil
	case item.FieldPoll:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoll(v)
		return nil
	case item.FieldKids:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKids(v)
		return nil
	case item.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case item.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case item.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case item.FieldParts:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParts(v)
		return nil
	case item.FieldDescendants:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescendants(v)
		return nil
	case item.FieldTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	var fields []string
	if m.addparent != nil {
		fields = append(fields, item.FieldParent)
	}
	if m.addpoll != nil {
		fields = append(fields, item.FieldPoll)
	}
	if m.addscore != nil {
		fields = append(fields, item.FieldScore)
	}
	if m.adddescendants != nil {
		fields = append(fields, item.FieldDescendants)
	}
	if m.addtime != nil {
		fields = append(fields, item.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case item.FieldParent:
		return m.AddedParent()
	case item.FieldPoll:
		return m.AddedPoll()
	case item.FieldScore:
		return m.AddedScore()
	case item.FieldDescendants:
		return m.AddedDescendants()
	case item.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case item.FieldParent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParent(v)
		return nil
	case item.FieldPoll:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoll(v)
		return nil
	case item.FieldScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	case item.FieldDescendants:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDescendants(v)
		return nil
	case item.FieldTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(item.FieldBy) {
		fields = append(fields, item.FieldBy)
	}
	if m.FieldCleared(item.FieldText) {
		fields = append(fields, item.FieldText)
	}
	if m.FieldCleared(item.FieldParent) {
		fields = append(fields, item.FieldParent)
	}
	if m.FieldCleared(item.FieldPoll) {
		fields = append(fields, item.FieldPoll)
	}
	if m.FieldCleared(item.FieldKids) {
		fields = append(fields, item.FieldKids)
	}
	if m.FieldCleared(item.FieldURL) {
		fields = append(fields, item.FieldURL)
	}
	if m.FieldCleared(item.FieldScore) {
		fields = append(fields, item.FieldScore)
	}
	if m.FieldCleared(item.FieldTitle) {
		fields = append(fields, item.FieldTitle)
	}
	if m.FieldCleared(item.FieldParts) {
		fields = append(fields, item.FieldParts)
	}
	if m.FieldCleared(item.FieldDescendants) {
		fields = append(fields, item.FieldDescendants)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	switch name {
	case item.FieldBy:
		m.ClearBy()
		return nil
	case item.FieldText:
		m.ClearText()
		return nil
	case item.FieldParent:
		m.ClearParent()
		return nil
	case item.FieldPoll:
		m.ClearPoll()
		return nil
	case item.FieldKids:
		m.ClearKids()
		return nil
	case item.FieldURL:
		m.ClearURL()
		return nil
	case item.FieldScore:
		m.ClearScore()
		return nil
	case item.FieldTitle:
		m.ClearTitle()
		return nil
	case item.FieldParts:
		m.ClearParts()
		return nil
	case item.FieldDescendants:
		m.ClearDescendants()
		return nil
	}
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldDeleted:
		m.ResetDeleted()
		return nil
	case item.FieldType:
		m.ResetType()
		return nil
	case item.FieldBy:
		m.ResetBy()
		return nil
	case item.FieldText:
		m.ResetText()
		return nil
	case item.FieldDead:
		m.ResetDead()
		return nil
	case item.FieldParent:
		m.ResetParent()
		return nil
	case item.FieldPoll:
		m.ResetPoll()
		return nil
	case item.FieldKids:
		m.ResetKids()
		return nil
	case item.FieldURL:
		m.ResetURL()
		return nil
	case item.FieldScore:
		m.ResetScore()
		return nil
	case item.FieldTitle:
		m.ResetTitle()
		return nil
	case item.FieldParts:
		m.ResetParts()
		return nil
	case item.FieldDescendants:
		m.ResetDescendants()
		return nil
	case item.FieldTime:
		m.ResetTime()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.children != nil {
		edges = append(edges, item.EdgeChildren)
	}
	if m.parents != nil {
		edges = append(edges, item.EdgeParents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeParents:
		ids := make([]ent.Value, 0, len(m.parents))
		for id := range m.parents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, item.EdgeChildren)
	}
	if m.removedparents != nil {
		edges = append(edges, item.EdgeParents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeParents:
		ids := make([]ent.Value, 0, len(m.removedparents))
		for id := range m.removedparents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchildren {
		edges = append(edges, item.EdgeChildren)
	}
	if m.clearedparents {
		edges = append(edges, item.EdgeParents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgeChildren:
		return m.clearedchildren
	case item.EdgeParents:
		return m.clearedparents
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgeChildren:
		m.ResetChildren()
		return nil
	case item.EdgeParents:
		m.ResetParents()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created       *int64
	addcreated    *int64
	karma         *int
	addkarma      *int
	about         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreated sets the "created" field.
func (m *UserMutation) SetCreated(i int64) {
	m.created = &i
	m.addcreated = nil
}

// Created returns the value of the "created" field in the mutation.
func (m *UserMutation) Created() (r int64, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreated(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// AddCreated adds i to the "created" field.
func (m *UserMutation) AddCreated(i int64) {
	if m.addcreated != nil {
		*m.addcreated += i
	} else {
		m.addcreated = &i
	}
}

// AddedCreated returns the value that was added to the "created" field in this mutation.
func (m *UserMutation) AddedCreated() (r int64, exists bool) {
	v := m.addcreated
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreated clears the value of the "created" field.
func (m *UserMutation) ClearCreated() {
	m.created = nil
	m.addcreated = nil
	m.clearedFields[user.FieldCreated] = struct{}{}
}

// CreatedCleared returns if the "created" field was cleared in this mutation.
func (m *UserMutation) CreatedCleared() bool {
	_, ok := m.clearedFields[user.FieldCreated]
	return ok
}

// ResetCreated resets all changes to the "created" field.
func (m *UserMutation) ResetCreated() {
	m.created = nil
	m.addcreated = nil
	delete(m.clearedFields, user.FieldCreated)
}

// SetKarma sets the "karma" field.
func (m *UserMutation) SetKarma(i int) {
	m.karma = &i
	m.addkarma = nil
}

// Karma returns the value of the "karma" field in the mutation.
func (m *UserMutation) Karma() (r int, exists bool) {
	v := m.karma
	if v == nil {
		return
	}
	return *v, true
}

// OldKarma returns the old "karma" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldKarma(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKarma is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKarma requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKarma: %w", err)
	}
	return oldValue.Karma, nil
}

// AddKarma adds i to the "karma" field.
func (m *UserMutation) AddKarma(i int) {
	if m.addkarma != nil {
		*m.addkarma += i
	} else {
		m.addkarma = &i
	}
}

// AddedKarma returns the value that was added to the "karma" field in this mutation.
func (m *UserMutation) AddedKarma() (r int, exists bool) {
	v := m.addkarma
	if v == nil {
		return
	}
	return *v, true
}

// ResetKarma resets all changes to the "karma" field.
func (m *UserMutation) ResetKarma() {
	m.karma = nil
	m.addkarma = nil
}

// SetAbout sets the "about" field.
func (m *UserMutation) SetAbout(s string) {
	m.about = &s
}

// About returns the value of the "about" field in the mutation.
func (m *UserMutation) About() (r string, exists bool) {
	v := m.about
	if v == nil {
		return
	}
	return *v, true
}

// OldAbout returns the old "about" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAbout(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbout: %w", err)
	}
	return oldValue.About, nil
}

// ClearAbout clears the value of the "about" field.
func (m *UserMutation) ClearAbout() {
	m.about = nil
	m.clearedFields[user.FieldAbout] = struct{}{}
}

// AboutCleared returns if the "about" field was cleared in this mutation.
func (m *UserMutation) AboutCleared() bool {
	_, ok := m.clearedFields[user.FieldAbout]
	return ok
}

// ResetAbout resets all changes to the "about" field.
func (m *UserMutation) ResetAbout() {
	m.about = nil
	delete(m.clearedFields, user.FieldAbout)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created != nil {
		fields = append(fields, user.FieldCreated)
	}
	if m.karma != nil {
		fields = append(fields, user.FieldKarma)
	}
	if m.about != nil {
		fields = append(fields, user.FieldAbout)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreated:
		return m.Created()
	case user.FieldKarma:
		return m.Karma()
	case user.FieldAbout:
		return m.About()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreated:
		return m.OldCreated(ctx)
	case user.FieldKarma:
		return m.OldKarma(ctx)
	case user.FieldAbout:
		return m.OldAbout(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreated:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case user.FieldKarma:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKarma(v)
		return nil
	case user.FieldAbout:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbout(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addcreated != nil {
		fields = append(fields, user.FieldCreated)
	}
	if m.addkarma != nil {
		fields = append(fields, user.FieldKarma)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreated:
		return m.AddedCreated()
	case user.FieldKarma:
		return m.AddedKarma()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreated:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreated(v)
		return nil
	case user.FieldKarma:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKarma(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCreated) {
		fields = append(fields, user.FieldCreated)
	}
	if m.FieldCleared(user.FieldAbout) {
		fields = append(fields, user.FieldAbout)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCreated:
		m.ClearCreated()
		return nil
	case user.FieldAbout:
		m.ClearAbout()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreated:
		m.ResetCreated()
		return nil
	case user.FieldKarma:
		m.ResetKarma()
		return nil
	case user.FieldAbout:
		m.ResetAbout()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
