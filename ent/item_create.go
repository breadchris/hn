// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/breadchris/hn/ent/item"
)

// ItemCreate is the builder for creating a Item entity.
type ItemCreate struct {
	config
	mutation *ItemMutation
	hooks    []Hook
}

// SetDeleted sets the "deleted" field.
func (ic *ItemCreate) SetDeleted(b bool) *ItemCreate {
	ic.mutation.SetDeleted(b)
	return ic
}

// SetType sets the "type" field.
func (ic *ItemCreate) SetType(i item.Type) *ItemCreate {
	ic.mutation.SetType(i)
	return ic
}

// SetBy sets the "by" field.
func (ic *ItemCreate) SetBy(s string) *ItemCreate {
	ic.mutation.SetBy(s)
	return ic
}

// SetNillableBy sets the "by" field if the given value is not nil.
func (ic *ItemCreate) SetNillableBy(s *string) *ItemCreate {
	if s != nil {
		ic.SetBy(*s)
	}
	return ic
}

// SetText sets the "text" field.
func (ic *ItemCreate) SetText(s string) *ItemCreate {
	ic.mutation.SetText(s)
	return ic
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ic *ItemCreate) SetNillableText(s *string) *ItemCreate {
	if s != nil {
		ic.SetText(*s)
	}
	return ic
}

// SetDead sets the "dead" field.
func (ic *ItemCreate) SetDead(b bool) *ItemCreate {
	ic.mutation.SetDead(b)
	return ic
}

// SetParent sets the "parent" field.
func (ic *ItemCreate) SetParent(i int) *ItemCreate {
	ic.mutation.SetParent(i)
	return ic
}

// SetNillableParent sets the "parent" field if the given value is not nil.
func (ic *ItemCreate) SetNillableParent(i *int) *ItemCreate {
	if i != nil {
		ic.SetParent(*i)
	}
	return ic
}

// SetPoll sets the "poll" field.
func (ic *ItemCreate) SetPoll(i int) *ItemCreate {
	ic.mutation.SetPoll(i)
	return ic
}

// SetNillablePoll sets the "poll" field if the given value is not nil.
func (ic *ItemCreate) SetNillablePoll(i *int) *ItemCreate {
	if i != nil {
		ic.SetPoll(*i)
	}
	return ic
}

// SetKids sets the "kids" field.
func (ic *ItemCreate) SetKids(i []int) *ItemCreate {
	ic.mutation.SetKids(i)
	return ic
}

// SetURL sets the "url" field.
func (ic *ItemCreate) SetURL(s string) *ItemCreate {
	ic.mutation.SetURL(s)
	return ic
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ic *ItemCreate) SetNillableURL(s *string) *ItemCreate {
	if s != nil {
		ic.SetURL(*s)
	}
	return ic
}

// SetScore sets the "score" field.
func (ic *ItemCreate) SetScore(i int) *ItemCreate {
	ic.mutation.SetScore(i)
	return ic
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ic *ItemCreate) SetNillableScore(i *int) *ItemCreate {
	if i != nil {
		ic.SetScore(*i)
	}
	return ic
}

// SetTitle sets the "title" field.
func (ic *ItemCreate) SetTitle(s string) *ItemCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ic *ItemCreate) SetNillableTitle(s *string) *ItemCreate {
	if s != nil {
		ic.SetTitle(*s)
	}
	return ic
}

// SetParts sets the "parts" field.
func (ic *ItemCreate) SetParts(i []int) *ItemCreate {
	ic.mutation.SetParts(i)
	return ic
}

// SetDescendants sets the "descendants" field.
func (ic *ItemCreate) SetDescendants(i int) *ItemCreate {
	ic.mutation.SetDescendants(i)
	return ic
}

// SetNillableDescendants sets the "descendants" field if the given value is not nil.
func (ic *ItemCreate) SetNillableDescendants(i *int) *ItemCreate {
	if i != nil {
		ic.SetDescendants(*i)
	}
	return ic
}

// SetTime sets the "time" field.
func (ic *ItemCreate) SetTime(i int) *ItemCreate {
	ic.mutation.SetTime(i)
	return ic
}

// SetID sets the "id" field.
func (ic *ItemCreate) SetID(s string) *ItemCreate {
	ic.mutation.SetID(s)
	return ic
}

// AddChildIDs adds the "children" edge to the Item entity by IDs.
func (ic *ItemCreate) AddChildIDs(ids ...string) *ItemCreate {
	ic.mutation.AddChildIDs(ids...)
	return ic
}

// AddChildren adds the "children" edges to the Item entity.
func (ic *ItemCreate) AddChildren(i ...*Item) *ItemCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddChildIDs(ids...)
}

// AddParentIDs adds the "parents" edge to the Item entity by IDs.
func (ic *ItemCreate) AddParentIDs(ids ...string) *ItemCreate {
	ic.mutation.AddParentIDs(ids...)
	return ic
}

// AddParents adds the "parents" edges to the Item entity.
func (ic *ItemCreate) AddParents(i ...*Item) *ItemCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddParentIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (ic *ItemCreate) Mutation() *ItemMutation {
	return ic.mutation
}

// Save creates the Item in the database.
func (ic *ItemCreate) Save(ctx context.Context) (*Item, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ItemCreate) SaveX(ctx context.Context) *Item {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ItemCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ItemCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ItemCreate) check() error {
	if _, ok := ic.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Item.deleted"`)}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Item.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := item.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Item.type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Dead(); !ok {
		return &ValidationError{Name: "dead", err: errors.New(`ent: missing required field "Item.dead"`)}
	}
	if _, ok := ic.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Item.time"`)}
	}
	return nil
}

func (ic *ItemCreate) sqlSave(ctx context.Context) (*Item, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Item.ID type: %T", _spec.ID.Value)
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ItemCreate) createSpec() (*Item, *sqlgraph.CreateSpec) {
	var (
		_node = &Item{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(item.Table, sqlgraph.NewFieldSpec(item.FieldID, field.TypeString))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Deleted(); ok {
		_spec.SetField(item.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(item.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.By(); ok {
		_spec.SetField(item.FieldBy, field.TypeString, value)
		_node.By = value
	}
	if value, ok := ic.mutation.Text(); ok {
		_spec.SetField(item.FieldText, field.TypeString, value)
		_node.Text = &value
	}
	if value, ok := ic.mutation.Dead(); ok {
		_spec.SetField(item.FieldDead, field.TypeBool, value)
		_node.Dead = value
	}
	if value, ok := ic.mutation.Parent(); ok {
		_spec.SetField(item.FieldParent, field.TypeInt, value)
		_node.Parent = &value
	}
	if value, ok := ic.mutation.Poll(); ok {
		_spec.SetField(item.FieldPoll, field.TypeInt, value)
		_node.Poll = &value
	}
	if value, ok := ic.mutation.Kids(); ok {
		_spec.SetField(item.FieldKids, field.TypeJSON, value)
		_node.Kids = value
	}
	if value, ok := ic.mutation.URL(); ok {
		_spec.SetField(item.FieldURL, field.TypeString, value)
		_node.URL = &value
	}
	if value, ok := ic.mutation.Score(); ok {
		_spec.SetField(item.FieldScore, field.TypeInt, value)
		_node.Score = value
	}
	if value, ok := ic.mutation.Title(); ok {
		_spec.SetField(item.FieldTitle, field.TypeString, value)
		_node.Title = &value
	}
	if value, ok := ic.mutation.Parts(); ok {
		_spec.SetField(item.FieldParts, field.TypeJSON, value)
		_node.Parts = value
	}
	if value, ok := ic.mutation.Descendants(); ok {
		_spec.SetField(item.FieldDescendants, field.TypeInt, value)
		_node.Descendants = value
	}
	if value, ok := ic.mutation.Time(); ok {
		_spec.SetField(item.FieldTime, field.TypeInt, value)
		_node.Time = value
	}
	if nodes := ic.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ChildrenTable,
			Columns: item.ChildrenPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ParentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.ParentsTable,
			Columns: item.ParentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemCreateBulk is the builder for creating many Item entities in bulk.
type ItemCreateBulk struct {
	config
	err      error
	builders []*ItemCreate
}

// Save creates the Item entities in the database.
func (icb *ItemCreateBulk) Save(ctx context.Context) ([]*Item, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Item, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ItemCreateBulk) SaveX(ctx context.Context) []*Item {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ItemCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ItemCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
