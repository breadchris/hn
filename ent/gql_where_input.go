// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"

	"github.com/breadchris/hn/ent/item"
	"github.com/breadchris/hn/ent/predicate"
	"github.com/breadchris/hn/ent/user"
)

// ItemWhereInput represents a where input for filtering Item queries.
type ItemWhereInput struct {
	Predicates []predicate.Item  `json:"-"`
	Not        *ItemWhereInput   `json:"not,omitempty"`
	Or         []*ItemWhereInput `json:"or,omitempty"`
	And        []*ItemWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "deleted" field predicates.
	Deleted    *bool `json:"deleted,omitempty"`
	DeletedNEQ *bool `json:"deletedNEQ,omitempty"`

	// "type" field predicates.
	Type      *item.Type  `json:"type,omitempty"`
	TypeNEQ   *item.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []item.Type `json:"typeIn,omitempty"`
	TypeNotIn []item.Type `json:"typeNotIn,omitempty"`

	// "by" field predicates.
	By             *string  `json:"by,omitempty"`
	ByNEQ          *string  `json:"byNEQ,omitempty"`
	ByIn           []string `json:"byIn,omitempty"`
	ByNotIn        []string `json:"byNotIn,omitempty"`
	ByGT           *string  `json:"byGT,omitempty"`
	ByGTE          *string  `json:"byGTE,omitempty"`
	ByLT           *string  `json:"byLT,omitempty"`
	ByLTE          *string  `json:"byLTE,omitempty"`
	ByContains     *string  `json:"byContains,omitempty"`
	ByHasPrefix    *string  `json:"byHasPrefix,omitempty"`
	ByHasSuffix    *string  `json:"byHasSuffix,omitempty"`
	ByIsNil        bool     `json:"byIsNil,omitempty"`
	ByNotNil       bool     `json:"byNotNil,omitempty"`
	ByEqualFold    *string  `json:"byEqualFold,omitempty"`
	ByContainsFold *string  `json:"byContainsFold,omitempty"`

	// "text" field predicates.
	Text             *string  `json:"text,omitempty"`
	TextNEQ          *string  `json:"textNEQ,omitempty"`
	TextIn           []string `json:"textIn,omitempty"`
	TextNotIn        []string `json:"textNotIn,omitempty"`
	TextGT           *string  `json:"textGT,omitempty"`
	TextGTE          *string  `json:"textGTE,omitempty"`
	TextLT           *string  `json:"textLT,omitempty"`
	TextLTE          *string  `json:"textLTE,omitempty"`
	TextContains     *string  `json:"textContains,omitempty"`
	TextHasPrefix    *string  `json:"textHasPrefix,omitempty"`
	TextHasSuffix    *string  `json:"textHasSuffix,omitempty"`
	TextIsNil        bool     `json:"textIsNil,omitempty"`
	TextNotNil       bool     `json:"textNotNil,omitempty"`
	TextEqualFold    *string  `json:"textEqualFold,omitempty"`
	TextContainsFold *string  `json:"textContainsFold,omitempty"`

	// "dead" field predicates.
	Dead    *bool `json:"dead,omitempty"`
	DeadNEQ *bool `json:"deadNEQ,omitempty"`

	// "parent" field predicates.
	Parent       *int  `json:"parent,omitempty"`
	ParentNEQ    *int  `json:"parentNEQ,omitempty"`
	ParentIn     []int `json:"parentIn,omitempty"`
	ParentNotIn  []int `json:"parentNotIn,omitempty"`
	ParentGT     *int  `json:"parentGT,omitempty"`
	ParentGTE    *int  `json:"parentGTE,omitempty"`
	ParentLT     *int  `json:"parentLT,omitempty"`
	ParentLTE    *int  `json:"parentLTE,omitempty"`
	ParentIsNil  bool  `json:"parentIsNil,omitempty"`
	ParentNotNil bool  `json:"parentNotNil,omitempty"`

	// "poll" field predicates.
	Poll       *int  `json:"poll,omitempty"`
	PollNEQ    *int  `json:"pollNEQ,omitempty"`
	PollIn     []int `json:"pollIn,omitempty"`
	PollNotIn  []int `json:"pollNotIn,omitempty"`
	PollGT     *int  `json:"pollGT,omitempty"`
	PollGTE    *int  `json:"pollGTE,omitempty"`
	PollLT     *int  `json:"pollLT,omitempty"`
	PollLTE    *int  `json:"pollLTE,omitempty"`
	PollIsNil  bool  `json:"pollIsNil,omitempty"`
	PollNotNil bool  `json:"pollNotNil,omitempty"`

	// "url" field predicates.
	URL             *string  `json:"url,omitempty"`
	URLNEQ          *string  `json:"urlNEQ,omitempty"`
	URLIn           []string `json:"urlIn,omitempty"`
	URLNotIn        []string `json:"urlNotIn,omitempty"`
	URLGT           *string  `json:"urlGT,omitempty"`
	URLGTE          *string  `json:"urlGTE,omitempty"`
	URLLT           *string  `json:"urlLT,omitempty"`
	URLLTE          *string  `json:"urlLTE,omitempty"`
	URLContains     *string  `json:"urlContains,omitempty"`
	URLHasPrefix    *string  `json:"urlHasPrefix,omitempty"`
	URLHasSuffix    *string  `json:"urlHasSuffix,omitempty"`
	URLIsNil        bool     `json:"urlIsNil,omitempty"`
	URLNotNil       bool     `json:"urlNotNil,omitempty"`
	URLEqualFold    *string  `json:"urlEqualFold,omitempty"`
	URLContainsFold *string  `json:"urlContainsFold,omitempty"`

	// "score" field predicates.
	Score       *int  `json:"score,omitempty"`
	ScoreNEQ    *int  `json:"scoreNEQ,omitempty"`
	ScoreIn     []int `json:"scoreIn,omitempty"`
	ScoreNotIn  []int `json:"scoreNotIn,omitempty"`
	ScoreGT     *int  `json:"scoreGT,omitempty"`
	ScoreGTE    *int  `json:"scoreGTE,omitempty"`
	ScoreLT     *int  `json:"scoreLT,omitempty"`
	ScoreLTE    *int  `json:"scoreLTE,omitempty"`
	ScoreIsNil  bool  `json:"scoreIsNil,omitempty"`
	ScoreNotNil bool  `json:"scoreNotNil,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleIsNil        bool     `json:"titleIsNil,omitempty"`
	TitleNotNil       bool     `json:"titleNotNil,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "descendants" field predicates.
	Descendants       *int  `json:"descendants,omitempty"`
	DescendantsNEQ    *int  `json:"descendantsNEQ,omitempty"`
	DescendantsIn     []int `json:"descendantsIn,omitempty"`
	DescendantsNotIn  []int `json:"descendantsNotIn,omitempty"`
	DescendantsGT     *int  `json:"descendantsGT,omitempty"`
	DescendantsGTE    *int  `json:"descendantsGTE,omitempty"`
	DescendantsLT     *int  `json:"descendantsLT,omitempty"`
	DescendantsLTE    *int  `json:"descendantsLTE,omitempty"`
	DescendantsIsNil  bool  `json:"descendantsIsNil,omitempty"`
	DescendantsNotNil bool  `json:"descendantsNotNil,omitempty"`

	// "time" field predicates.
	Time      *int  `json:"time,omitempty"`
	TimeNEQ   *int  `json:"timeNEQ,omitempty"`
	TimeIn    []int `json:"timeIn,omitempty"`
	TimeNotIn []int `json:"timeNotIn,omitempty"`
	TimeGT    *int  `json:"timeGT,omitempty"`
	TimeGTE   *int  `json:"timeGTE,omitempty"`
	TimeLT    *int  `json:"timeLT,omitempty"`
	TimeLTE   *int  `json:"timeLTE,omitempty"`

	// "children" edge predicates.
	HasChildren     *bool             `json:"hasChildren,omitempty"`
	HasChildrenWith []*ItemWhereInput `json:"hasChildrenWith,omitempty"`

	// "parents" edge predicates.
	HasParents     *bool             `json:"hasParents,omitempty"`
	HasParentsWith []*ItemWhereInput `json:"hasParentsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ItemWhereInput) AddPredicates(predicates ...predicate.Item) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ItemWhereInput filter on the ItemQuery builder.
func (i *ItemWhereInput) Filter(q *ItemQuery) (*ItemQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyItemWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyItemWhereInput is returned in case the ItemWhereInput is empty.
var ErrEmptyItemWhereInput = errors.New("ent: empty predicate ItemWhereInput")

// P returns a predicate for filtering items.
// An error is returned if the input is empty or invalid.
func (i *ItemWhereInput) P() (predicate.Item, error) {
	var predicates []predicate.Item
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, item.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Item, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, item.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Item, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, item.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, item.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, item.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, item.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, item.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, item.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, item.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, item.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, item.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, item.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, item.IDContainsFold(*i.IDContainsFold))
	}
	if i.Deleted != nil {
		predicates = append(predicates, item.DeletedEQ(*i.Deleted))
	}
	if i.DeletedNEQ != nil {
		predicates = append(predicates, item.DeletedNEQ(*i.DeletedNEQ))
	}
	if i.Type != nil {
		predicates = append(predicates, item.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, item.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, item.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, item.TypeNotIn(i.TypeNotIn...))
	}
	if i.By != nil {
		predicates = append(predicates, item.ByEQ(*i.By))
	}
	if i.ByNEQ != nil {
		predicates = append(predicates, item.ByNEQ(*i.ByNEQ))
	}
	if len(i.ByIn) > 0 {
		predicates = append(predicates, item.ByIn(i.ByIn...))
	}
	if len(i.ByNotIn) > 0 {
		predicates = append(predicates, item.ByNotIn(i.ByNotIn...))
	}
	if i.ByGT != nil {
		predicates = append(predicates, item.ByGT(*i.ByGT))
	}
	if i.ByGTE != nil {
		predicates = append(predicates, item.ByGTE(*i.ByGTE))
	}
	if i.ByLT != nil {
		predicates = append(predicates, item.ByLT(*i.ByLT))
	}
	if i.ByLTE != nil {
		predicates = append(predicates, item.ByLTE(*i.ByLTE))
	}
	if i.ByContains != nil {
		predicates = append(predicates, item.ByContains(*i.ByContains))
	}
	if i.ByHasPrefix != nil {
		predicates = append(predicates, item.ByHasPrefix(*i.ByHasPrefix))
	}
	if i.ByHasSuffix != nil {
		predicates = append(predicates, item.ByHasSuffix(*i.ByHasSuffix))
	}
	if i.ByIsNil {
		predicates = append(predicates, item.ByIsNil())
	}
	if i.ByNotNil {
		predicates = append(predicates, item.ByNotNil())
	}
	if i.ByEqualFold != nil {
		predicates = append(predicates, item.ByEqualFold(*i.ByEqualFold))
	}
	if i.ByContainsFold != nil {
		predicates = append(predicates, item.ByContainsFold(*i.ByContainsFold))
	}
	if i.Text != nil {
		predicates = append(predicates, item.TextEQ(*i.Text))
	}
	if i.TextNEQ != nil {
		predicates = append(predicates, item.TextNEQ(*i.TextNEQ))
	}
	if len(i.TextIn) > 0 {
		predicates = append(predicates, item.TextIn(i.TextIn...))
	}
	if len(i.TextNotIn) > 0 {
		predicates = append(predicates, item.TextNotIn(i.TextNotIn...))
	}
	if i.TextGT != nil {
		predicates = append(predicates, item.TextGT(*i.TextGT))
	}
	if i.TextGTE != nil {
		predicates = append(predicates, item.TextGTE(*i.TextGTE))
	}
	if i.TextLT != nil {
		predicates = append(predicates, item.TextLT(*i.TextLT))
	}
	if i.TextLTE != nil {
		predicates = append(predicates, item.TextLTE(*i.TextLTE))
	}
	if i.TextContains != nil {
		predicates = append(predicates, item.TextContains(*i.TextContains))
	}
	if i.TextHasPrefix != nil {
		predicates = append(predicates, item.TextHasPrefix(*i.TextHasPrefix))
	}
	if i.TextHasSuffix != nil {
		predicates = append(predicates, item.TextHasSuffix(*i.TextHasSuffix))
	}
	if i.TextIsNil {
		predicates = append(predicates, item.TextIsNil())
	}
	if i.TextNotNil {
		predicates = append(predicates, item.TextNotNil())
	}
	if i.TextEqualFold != nil {
		predicates = append(predicates, item.TextEqualFold(*i.TextEqualFold))
	}
	if i.TextContainsFold != nil {
		predicates = append(predicates, item.TextContainsFold(*i.TextContainsFold))
	}
	if i.Dead != nil {
		predicates = append(predicates, item.DeadEQ(*i.Dead))
	}
	if i.DeadNEQ != nil {
		predicates = append(predicates, item.DeadNEQ(*i.DeadNEQ))
	}
	if i.Parent != nil {
		predicates = append(predicates, item.ParentEQ(*i.Parent))
	}
	if i.ParentNEQ != nil {
		predicates = append(predicates, item.ParentNEQ(*i.ParentNEQ))
	}
	if len(i.ParentIn) > 0 {
		predicates = append(predicates, item.ParentIn(i.ParentIn...))
	}
	if len(i.ParentNotIn) > 0 {
		predicates = append(predicates, item.ParentNotIn(i.ParentNotIn...))
	}
	if i.ParentGT != nil {
		predicates = append(predicates, item.ParentGT(*i.ParentGT))
	}
	if i.ParentGTE != nil {
		predicates = append(predicates, item.ParentGTE(*i.ParentGTE))
	}
	if i.ParentLT != nil {
		predicates = append(predicates, item.ParentLT(*i.ParentLT))
	}
	if i.ParentLTE != nil {
		predicates = append(predicates, item.ParentLTE(*i.ParentLTE))
	}
	if i.ParentIsNil {
		predicates = append(predicates, item.ParentIsNil())
	}
	if i.ParentNotNil {
		predicates = append(predicates, item.ParentNotNil())
	}
	if i.Poll != nil {
		predicates = append(predicates, item.PollEQ(*i.Poll))
	}
	if i.PollNEQ != nil {
		predicates = append(predicates, item.PollNEQ(*i.PollNEQ))
	}
	if len(i.PollIn) > 0 {
		predicates = append(predicates, item.PollIn(i.PollIn...))
	}
	if len(i.PollNotIn) > 0 {
		predicates = append(predicates, item.PollNotIn(i.PollNotIn...))
	}
	if i.PollGT != nil {
		predicates = append(predicates, item.PollGT(*i.PollGT))
	}
	if i.PollGTE != nil {
		predicates = append(predicates, item.PollGTE(*i.PollGTE))
	}
	if i.PollLT != nil {
		predicates = append(predicates, item.PollLT(*i.PollLT))
	}
	if i.PollLTE != nil {
		predicates = append(predicates, item.PollLTE(*i.PollLTE))
	}
	if i.PollIsNil {
		predicates = append(predicates, item.PollIsNil())
	}
	if i.PollNotNil {
		predicates = append(predicates, item.PollNotNil())
	}
	if i.URL != nil {
		predicates = append(predicates, item.URLEQ(*i.URL))
	}
	if i.URLNEQ != nil {
		predicates = append(predicates, item.URLNEQ(*i.URLNEQ))
	}
	if len(i.URLIn) > 0 {
		predicates = append(predicates, item.URLIn(i.URLIn...))
	}
	if len(i.URLNotIn) > 0 {
		predicates = append(predicates, item.URLNotIn(i.URLNotIn...))
	}
	if i.URLGT != nil {
		predicates = append(predicates, item.URLGT(*i.URLGT))
	}
	if i.URLGTE != nil {
		predicates = append(predicates, item.URLGTE(*i.URLGTE))
	}
	if i.URLLT != nil {
		predicates = append(predicates, item.URLLT(*i.URLLT))
	}
	if i.URLLTE != nil {
		predicates = append(predicates, item.URLLTE(*i.URLLTE))
	}
	if i.URLContains != nil {
		predicates = append(predicates, item.URLContains(*i.URLContains))
	}
	if i.URLHasPrefix != nil {
		predicates = append(predicates, item.URLHasPrefix(*i.URLHasPrefix))
	}
	if i.URLHasSuffix != nil {
		predicates = append(predicates, item.URLHasSuffix(*i.URLHasSuffix))
	}
	if i.URLIsNil {
		predicates = append(predicates, item.URLIsNil())
	}
	if i.URLNotNil {
		predicates = append(predicates, item.URLNotNil())
	}
	if i.URLEqualFold != nil {
		predicates = append(predicates, item.URLEqualFold(*i.URLEqualFold))
	}
	if i.URLContainsFold != nil {
		predicates = append(predicates, item.URLContainsFold(*i.URLContainsFold))
	}
	if i.Score != nil {
		predicates = append(predicates, item.ScoreEQ(*i.Score))
	}
	if i.ScoreNEQ != nil {
		predicates = append(predicates, item.ScoreNEQ(*i.ScoreNEQ))
	}
	if len(i.ScoreIn) > 0 {
		predicates = append(predicates, item.ScoreIn(i.ScoreIn...))
	}
	if len(i.ScoreNotIn) > 0 {
		predicates = append(predicates, item.ScoreNotIn(i.ScoreNotIn...))
	}
	if i.ScoreGT != nil {
		predicates = append(predicates, item.ScoreGT(*i.ScoreGT))
	}
	if i.ScoreGTE != nil {
		predicates = append(predicates, item.ScoreGTE(*i.ScoreGTE))
	}
	if i.ScoreLT != nil {
		predicates = append(predicates, item.ScoreLT(*i.ScoreLT))
	}
	if i.ScoreLTE != nil {
		predicates = append(predicates, item.ScoreLTE(*i.ScoreLTE))
	}
	if i.ScoreIsNil {
		predicates = append(predicates, item.ScoreIsNil())
	}
	if i.ScoreNotNil {
		predicates = append(predicates, item.ScoreNotNil())
	}
	if i.Title != nil {
		predicates = append(predicates, item.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, item.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, item.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, item.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, item.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, item.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, item.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, item.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, item.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, item.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, item.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleIsNil {
		predicates = append(predicates, item.TitleIsNil())
	}
	if i.TitleNotNil {
		predicates = append(predicates, item.TitleNotNil())
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, item.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, item.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Descendants != nil {
		predicates = append(predicates, item.DescendantsEQ(*i.Descendants))
	}
	if i.DescendantsNEQ != nil {
		predicates = append(predicates, item.DescendantsNEQ(*i.DescendantsNEQ))
	}
	if len(i.DescendantsIn) > 0 {
		predicates = append(predicates, item.DescendantsIn(i.DescendantsIn...))
	}
	if len(i.DescendantsNotIn) > 0 {
		predicates = append(predicates, item.DescendantsNotIn(i.DescendantsNotIn...))
	}
	if i.DescendantsGT != nil {
		predicates = append(predicates, item.DescendantsGT(*i.DescendantsGT))
	}
	if i.DescendantsGTE != nil {
		predicates = append(predicates, item.DescendantsGTE(*i.DescendantsGTE))
	}
	if i.DescendantsLT != nil {
		predicates = append(predicates, item.DescendantsLT(*i.DescendantsLT))
	}
	if i.DescendantsLTE != nil {
		predicates = append(predicates, item.DescendantsLTE(*i.DescendantsLTE))
	}
	if i.DescendantsIsNil {
		predicates = append(predicates, item.DescendantsIsNil())
	}
	if i.DescendantsNotNil {
		predicates = append(predicates, item.DescendantsNotNil())
	}
	if i.Time != nil {
		predicates = append(predicates, item.TimeEQ(*i.Time))
	}
	if i.TimeNEQ != nil {
		predicates = append(predicates, item.TimeNEQ(*i.TimeNEQ))
	}
	if len(i.TimeIn) > 0 {
		predicates = append(predicates, item.TimeIn(i.TimeIn...))
	}
	if len(i.TimeNotIn) > 0 {
		predicates = append(predicates, item.TimeNotIn(i.TimeNotIn...))
	}
	if i.TimeGT != nil {
		predicates = append(predicates, item.TimeGT(*i.TimeGT))
	}
	if i.TimeGTE != nil {
		predicates = append(predicates, item.TimeGTE(*i.TimeGTE))
	}
	if i.TimeLT != nil {
		predicates = append(predicates, item.TimeLT(*i.TimeLT))
	}
	if i.TimeLTE != nil {
		predicates = append(predicates, item.TimeLTE(*i.TimeLTE))
	}

	if i.HasChildren != nil {
		p := item.HasChildren()
		if !*i.HasChildren {
			p = item.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasChildrenWith) > 0 {
		with := make([]predicate.Item, 0, len(i.HasChildrenWith))
		for _, w := range i.HasChildrenWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasChildrenWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, item.HasChildrenWith(with...))
	}
	if i.HasParents != nil {
		p := item.HasParents()
		if !*i.HasParents {
			p = item.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasParentsWith) > 0 {
		with := make([]predicate.Item, 0, len(i.HasParentsWith))
		for _, w := range i.HasParentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasParentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, item.HasParentsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyItemWhereInput
	case 1:
		return predicates[0], nil
	default:
		return item.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created" field predicates.
	Created       *int64  `json:"created,omitempty"`
	CreatedNEQ    *int64  `json:"createdNEQ,omitempty"`
	CreatedIn     []int64 `json:"createdIn,omitempty"`
	CreatedNotIn  []int64 `json:"createdNotIn,omitempty"`
	CreatedGT     *int64  `json:"createdGT,omitempty"`
	CreatedGTE    *int64  `json:"createdGTE,omitempty"`
	CreatedLT     *int64  `json:"createdLT,omitempty"`
	CreatedLTE    *int64  `json:"createdLTE,omitempty"`
	CreatedIsNil  bool    `json:"createdIsNil,omitempty"`
	CreatedNotNil bool    `json:"createdNotNil,omitempty"`

	// "karma" field predicates.
	Karma      *int  `json:"karma,omitempty"`
	KarmaNEQ   *int  `json:"karmaNEQ,omitempty"`
	KarmaIn    []int `json:"karmaIn,omitempty"`
	KarmaNotIn []int `json:"karmaNotIn,omitempty"`
	KarmaGT    *int  `json:"karmaGT,omitempty"`
	KarmaGTE   *int  `json:"karmaGTE,omitempty"`
	KarmaLT    *int  `json:"karmaLT,omitempty"`
	KarmaLTE   *int  `json:"karmaLTE,omitempty"`

	// "about" field predicates.
	About             *string  `json:"about,omitempty"`
	AboutNEQ          *string  `json:"aboutNEQ,omitempty"`
	AboutIn           []string `json:"aboutIn,omitempty"`
	AboutNotIn        []string `json:"aboutNotIn,omitempty"`
	AboutGT           *string  `json:"aboutGT,omitempty"`
	AboutGTE          *string  `json:"aboutGTE,omitempty"`
	AboutLT           *string  `json:"aboutLT,omitempty"`
	AboutLTE          *string  `json:"aboutLTE,omitempty"`
	AboutContains     *string  `json:"aboutContains,omitempty"`
	AboutHasPrefix    *string  `json:"aboutHasPrefix,omitempty"`
	AboutHasSuffix    *string  `json:"aboutHasSuffix,omitempty"`
	AboutIsNil        bool     `json:"aboutIsNil,omitempty"`
	AboutNotNil       bool     `json:"aboutNotNil,omitempty"`
	AboutEqualFold    *string  `json:"aboutEqualFold,omitempty"`
	AboutContainsFold *string  `json:"aboutContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, user.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, user.IDContainsFold(*i.IDContainsFold))
	}
	if i.Created != nil {
		predicates = append(predicates, user.CreatedEQ(*i.Created))
	}
	if i.CreatedNEQ != nil {
		predicates = append(predicates, user.CreatedNEQ(*i.CreatedNEQ))
	}
	if len(i.CreatedIn) > 0 {
		predicates = append(predicates, user.CreatedIn(i.CreatedIn...))
	}
	if len(i.CreatedNotIn) > 0 {
		predicates = append(predicates, user.CreatedNotIn(i.CreatedNotIn...))
	}
	if i.CreatedGT != nil {
		predicates = append(predicates, user.CreatedGT(*i.CreatedGT))
	}
	if i.CreatedGTE != nil {
		predicates = append(predicates, user.CreatedGTE(*i.CreatedGTE))
	}
	if i.CreatedLT != nil {
		predicates = append(predicates, user.CreatedLT(*i.CreatedLT))
	}
	if i.CreatedLTE != nil {
		predicates = append(predicates, user.CreatedLTE(*i.CreatedLTE))
	}
	if i.CreatedIsNil {
		predicates = append(predicates, user.CreatedIsNil())
	}
	if i.CreatedNotNil {
		predicates = append(predicates, user.CreatedNotNil())
	}
	if i.Karma != nil {
		predicates = append(predicates, user.KarmaEQ(*i.Karma))
	}
	if i.KarmaNEQ != nil {
		predicates = append(predicates, user.KarmaNEQ(*i.KarmaNEQ))
	}
	if len(i.KarmaIn) > 0 {
		predicates = append(predicates, user.KarmaIn(i.KarmaIn...))
	}
	if len(i.KarmaNotIn) > 0 {
		predicates = append(predicates, user.KarmaNotIn(i.KarmaNotIn...))
	}
	if i.KarmaGT != nil {
		predicates = append(predicates, user.KarmaGT(*i.KarmaGT))
	}
	if i.KarmaGTE != nil {
		predicates = append(predicates, user.KarmaGTE(*i.KarmaGTE))
	}
	if i.KarmaLT != nil {
		predicates = append(predicates, user.KarmaLT(*i.KarmaLT))
	}
	if i.KarmaLTE != nil {
		predicates = append(predicates, user.KarmaLTE(*i.KarmaLTE))
	}
	if i.About != nil {
		predicates = append(predicates, user.AboutEQ(*i.About))
	}
	if i.AboutNEQ != nil {
		predicates = append(predicates, user.AboutNEQ(*i.AboutNEQ))
	}
	if len(i.AboutIn) > 0 {
		predicates = append(predicates, user.AboutIn(i.AboutIn...))
	}
	if len(i.AboutNotIn) > 0 {
		predicates = append(predicates, user.AboutNotIn(i.AboutNotIn...))
	}
	if i.AboutGT != nil {
		predicates = append(predicates, user.AboutGT(*i.AboutGT))
	}
	if i.AboutGTE != nil {
		predicates = append(predicates, user.AboutGTE(*i.AboutGTE))
	}
	if i.AboutLT != nil {
		predicates = append(predicates, user.AboutLT(*i.AboutLT))
	}
	if i.AboutLTE != nil {
		predicates = append(predicates, user.AboutLTE(*i.AboutLTE))
	}
	if i.AboutContains != nil {
		predicates = append(predicates, user.AboutContains(*i.AboutContains))
	}
	if i.AboutHasPrefix != nil {
		predicates = append(predicates, user.AboutHasPrefix(*i.AboutHasPrefix))
	}
	if i.AboutHasSuffix != nil {
		predicates = append(predicates, user.AboutHasSuffix(*i.AboutHasSuffix))
	}
	if i.AboutIsNil {
		predicates = append(predicates, user.AboutIsNil())
	}
	if i.AboutNotNil {
		predicates = append(predicates, user.AboutNotNil())
	}
	if i.AboutEqualFold != nil {
		predicates = append(predicates, user.AboutEqualFold(*i.AboutEqualFold))
	}
	if i.AboutContainsFold != nil {
		predicates = append(predicates, user.AboutContainsFold(*i.AboutContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
