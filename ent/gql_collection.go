// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/breadchris/hn/ent/item"
	"github.com/breadchris/hn/ent/user"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *ItemQuery) CollectFields(ctx context.Context, satisfies ...string) (*ItemQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return i, nil
	}
	if err := i.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return i, nil
}

func (i *ItemQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(item.Columns))
		selectedFields = []string{item.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "children":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, itemImplementors)...); err != nil {
				return err
			}
			i.WithNamedChildren(alias, func(wq *ItemQuery) {
				*wq = *query
			})
		case "parents":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ItemClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, itemImplementors)...); err != nil {
				return err
			}
			i.WithNamedParents(alias, func(wq *ItemQuery) {
				*wq = *query
			})
		case "deleted":
			if _, ok := fieldSeen[item.FieldDeleted]; !ok {
				selectedFields = append(selectedFields, item.FieldDeleted)
				fieldSeen[item.FieldDeleted] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[item.FieldType]; !ok {
				selectedFields = append(selectedFields, item.FieldType)
				fieldSeen[item.FieldType] = struct{}{}
			}
		case "by":
			if _, ok := fieldSeen[item.FieldBy]; !ok {
				selectedFields = append(selectedFields, item.FieldBy)
				fieldSeen[item.FieldBy] = struct{}{}
			}
		case "text":
			if _, ok := fieldSeen[item.FieldText]; !ok {
				selectedFields = append(selectedFields, item.FieldText)
				fieldSeen[item.FieldText] = struct{}{}
			}
		case "dead":
			if _, ok := fieldSeen[item.FieldDead]; !ok {
				selectedFields = append(selectedFields, item.FieldDead)
				fieldSeen[item.FieldDead] = struct{}{}
			}
		case "parent":
			if _, ok := fieldSeen[item.FieldParent]; !ok {
				selectedFields = append(selectedFields, item.FieldParent)
				fieldSeen[item.FieldParent] = struct{}{}
			}
		case "poll":
			if _, ok := fieldSeen[item.FieldPoll]; !ok {
				selectedFields = append(selectedFields, item.FieldPoll)
				fieldSeen[item.FieldPoll] = struct{}{}
			}
		case "kids":
			if _, ok := fieldSeen[item.FieldKids]; !ok {
				selectedFields = append(selectedFields, item.FieldKids)
				fieldSeen[item.FieldKids] = struct{}{}
			}
		case "url":
			if _, ok := fieldSeen[item.FieldURL]; !ok {
				selectedFields = append(selectedFields, item.FieldURL)
				fieldSeen[item.FieldURL] = struct{}{}
			}
		case "score":
			if _, ok := fieldSeen[item.FieldScore]; !ok {
				selectedFields = append(selectedFields, item.FieldScore)
				fieldSeen[item.FieldScore] = struct{}{}
			}
		case "title":
			if _, ok := fieldSeen[item.FieldTitle]; !ok {
				selectedFields = append(selectedFields, item.FieldTitle)
				fieldSeen[item.FieldTitle] = struct{}{}
			}
		case "parts":
			if _, ok := fieldSeen[item.FieldParts]; !ok {
				selectedFields = append(selectedFields, item.FieldParts)
				fieldSeen[item.FieldParts] = struct{}{}
			}
		case "descendants":
			if _, ok := fieldSeen[item.FieldDescendants]; !ok {
				selectedFields = append(selectedFields, item.FieldDescendants)
				fieldSeen[item.FieldDescendants] = struct{}{}
			}
		case "time":
			if _, ok := fieldSeen[item.FieldTime]; !ok {
				selectedFields = append(selectedFields, item.FieldTime)
				fieldSeen[item.FieldTime] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		i.Select(selectedFields...)
	}
	return nil
}

type itemPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ItemPaginateOption
}

func newItemPaginateArgs(rv map[string]any) *itemPaginateArgs {
	args := &itemPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ItemOrder{Field: &ItemOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithItemOrder(order))
			}
		case *ItemOrder:
			if v != nil {
				args.opts = append(args.opts, WithItemOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ItemWhereInput); ok {
		args.opts = append(args.opts, WithItemFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "created":
			if _, ok := fieldSeen[user.FieldCreated]; !ok {
				selectedFields = append(selectedFields, user.FieldCreated)
				fieldSeen[user.FieldCreated] = struct{}{}
			}
		case "karma":
			if _, ok := fieldSeen[user.FieldKarma]; !ok {
				selectedFields = append(selectedFields, user.FieldKarma)
				fieldSeen[user.FieldKarma] = struct{}{}
			}
		case "about":
			if _, ok := fieldSeen[user.FieldAbout]; !ok {
				selectedFields = append(selectedFields, user.FieldAbout)
				fieldSeen[user.FieldAbout] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
