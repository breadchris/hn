directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateItemInput is used for create Item object.
Input was generated by ent.
"""
input CreateItemInput {
  deleted: Boolean!
  type: ItemType!
  by: String
  text: String
  dead: Boolean!
  parent: Int
  poll: Int
  kids: [Int!]
  url: String
  score: Int
  title: String
  parts: [Int!]
  descendants: Int
  time: Int!
  childIDs: [ID!]
  parentIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Item implements Node {
  id: ID!
  deleted: Boolean!
  type: ItemType!
  by: String
  text: String
  dead: Boolean!
  parent: Int
  poll: Int
  kids: [Int!]
  url: String
  score: Int
  title: String
  parts: [Int!]
  descendants: Int
  time: Int!
  children: [Item!]
  parents: [Item!]
}
"""
A connection to a list of items.
"""
type ItemConnection {
  """
  A list of edges.
  """
  edges: [ItemEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ItemEdge {
  """
  The item at the end of the edge.
  """
  node: Item
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Item connections
"""
input ItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Items.
  """
  field: ItemOrderField!
}
"""
Properties by which Item connections can be ordered.
"""
enum ItemOrderField {
  TIME
}
"""
ItemType is enum for the field type
"""
enum ItemType @goModel(model: "github.com/breadchris/hn/ent/item.Type") {
  job
  story
  comment
  poll
  pollopt
}
"""
ItemWhereInput is used for filtering Item objects.
Input was generated by ent.
"""
input ItemWhereInput {
  not: ItemWhereInput
  and: [ItemWhereInput!]
  or: [ItemWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  deleted field predicates
  """
  deleted: Boolean
  deletedNEQ: Boolean
  """
  type field predicates
  """
  type: ItemType
  typeNEQ: ItemType
  typeIn: [ItemType!]
  typeNotIn: [ItemType!]
  """
  by field predicates
  """
  by: String
  byNEQ: String
  byIn: [String!]
  byNotIn: [String!]
  byGT: String
  byGTE: String
  byLT: String
  byLTE: String
  byContains: String
  byHasPrefix: String
  byHasSuffix: String
  byIsNil: Boolean
  byNotNil: Boolean
  byEqualFold: String
  byContainsFold: String
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textIsNil: Boolean
  textNotNil: Boolean
  textEqualFold: String
  textContainsFold: String
  """
  dead field predicates
  """
  dead: Boolean
  deadNEQ: Boolean
  """
  parent field predicates
  """
  parent: Int
  parentNEQ: Int
  parentIn: [Int!]
  parentNotIn: [Int!]
  parentGT: Int
  parentGTE: Int
  parentLT: Int
  parentLTE: Int
  parentIsNil: Boolean
  parentNotNil: Boolean
  """
  poll field predicates
  """
  poll: Int
  pollNEQ: Int
  pollIn: [Int!]
  pollNotIn: [Int!]
  pollGT: Int
  pollGTE: Int
  pollLT: Int
  pollLTE: Int
  pollIsNil: Boolean
  pollNotNil: Boolean
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
  """
  score field predicates
  """
  score: Int
  scoreNEQ: Int
  scoreIn: [Int!]
  scoreNotIn: [Int!]
  scoreGT: Int
  scoreGTE: Int
  scoreLT: Int
  scoreLTE: Int
  scoreIsNil: Boolean
  scoreNotNil: Boolean
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  descendants field predicates
  """
  descendants: Int
  descendantsNEQ: Int
  descendantsIn: [Int!]
  descendantsNotIn: [Int!]
  descendantsGT: Int
  descendantsGTE: Int
  descendantsLT: Int
  descendantsLTE: Int
  descendantsIsNil: Boolean
  descendantsNotNil: Boolean
  """
  time field predicates
  """
  time: Int
  timeNEQ: Int
  timeIn: [Int!]
  timeNotIn: [Int!]
  timeGT: Int
  timeGTE: Int
  timeLT: Int
  timeLTE: Int
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [ItemWhereInput!]
  """
  parents edge predicates
  """
  hasParents: Boolean
  hasParentsWith: [ItemWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/breadchris/hn/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  items(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Items returned from the connection.
    """
    orderBy: ItemOrder

    """
    Filtering options for Items returned from the connection.
    """
    where: ItemWhereInput
  ): ItemConnection!
}
type User implements Node {
  """
  The user's unique username. Case-sensitive.
  """
  id: ID!
  """
  Creation date of the user, in Unix Time.
  """
  created: Int
  """
  The user's karma.
  """
  karma: Int!
  """
  The user's optional self-description. HTML.
  """
  about: String
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created field predicates
  """
  created: Int
  createdNEQ: Int
  createdIn: [Int!]
  createdNotIn: [Int!]
  createdGT: Int
  createdGTE: Int
  createdLT: Int
  createdLTE: Int
  createdIsNil: Boolean
  createdNotNil: Boolean
  """
  karma field predicates
  """
  karma: Int
  karmaNEQ: Int
  karmaIn: [Int!]
  karmaNotIn: [Int!]
  karmaGT: Int
  karmaGTE: Int
  karmaLT: Int
  karmaLTE: Int
  """
  about field predicates
  """
  about: String
  aboutNEQ: String
  aboutIn: [String!]
  aboutNotIn: [String!]
  aboutGT: String
  aboutGTE: String
  aboutLT: String
  aboutLTE: String
  aboutContains: String
  aboutHasPrefix: String
  aboutHasSuffix: String
  aboutIsNil: Boolean
  aboutNotNil: Boolean
  aboutEqualFold: String
  aboutContainsFold: String
}
